{"version":3,"file":"/Users/wolfgangkling/Dropbox/Recaudo_Bogota/2017/Angular/SB-Admin-BS4-Angular-2/tools/utils/seed/template_locals.ts","sources":["/Users/wolfgangkling/Dropbox/Recaudo_Bogota/2017/Angular/SB-Admin-BS4-Angular-2/tools/utils/seed/template_locals.ts"],"names":[],"mappings":";AAAA,IAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAClC,sBAAqB,OAAO,CAAC,CAAA;AAC7B,qBAAqB,MAAM,CAAC,CAAA;AAE5B,uBAAmB,cAAc,CAAC,CAAA;AAElC,IAAM,SAAS,GAAG,UAAC,IAAY,EAAE,GAAW;IAC1C,IAAM,UAAU,GAAG,WAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACnC,IAAI,MAAW,CAAC;IAChB,IAAI,CAAC;QACH,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,MAAM,GAAG,IAAI,CAAC;QACd,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC,CAAC;AAMF;IACE,IAAM,aAAa,GAAG,YAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC;IAClD,IAAM,UAAU,GAAG,gBAAM,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;IAChE,IAAM,UAAU,GAAG,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACjD,IAAM,MAAM,GAAG,SAAS,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAEpD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAM,EAAE;QAC3B,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;KAC9D,CAAC,CAAC;AACL,CAAC;AAbe,sBAAc,iBAa7B,CAAA","sourcesContent":["import * as util from 'gulp-util';\nimport { argv } from 'yargs';\nimport { join } from 'path';\n\nimport Config from '../../config';\n\nconst getConfig = (path: string, env: string): any => {\n  const configPath = join(path, env);\n  let config: any;\n  try {\n    config = require(configPath);\n  } catch (e) {\n    config = null;\n    util.log(util.colors.red(e.message));\n  }\n\n  return config;\n};\n\n/**\n * Returns the project configuration (consisting of the base configuration provided by seed.config.ts and the additional\n * project specific overrides as defined in project.config.ts)\n */\nexport function templateLocals() {\n  const configEnvName = argv['config-env'] || 'dev';\n  const configPath = Config.getPluginConfig('environment-config');\n  const baseConfig = getConfig(configPath, 'base');\n  const config = getConfig(configPath, configEnvName);\n\n  if (!config) {\n    throw new Error('Invalid configuration name');\n  }\n\n  return Object.assign(Config, {\n    ENV_CONFIG: JSON.stringify(Object.assign(baseConfig, config))\n  });\n}\n\n"]}